// <auto-generated />
using System;
using Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(MyDBContext))]
    partial class MyDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.AllowanceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AllowanceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllowanceTypeNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("AllowanceType");
                });

            modelBuilder.Entity("Entity.Bank", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankNameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Entity.BankBranch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BankID")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchNameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("BankBranch");
                });

            modelBuilder.Entity("Entity.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BannerImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyFooter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("ThemeDarkColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThemeLightColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Entity.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryNameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Entity.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CountryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<string>("ERPId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("FingerprintNo")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ForeignFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ForeignLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ForeignMotherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ForeignSecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ForeignThirdName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<int?>("GradeID")
                        .HasColumnType("int");

                    b.Property<string>("IqamaNO")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobDescriptionID")
                        .HasColumnType("int");

                    b.Property<string>("JsonBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Leavebalance")
                        .HasColumnType("float");

                    b.Property<string>("ManagerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatusID")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SocialSecurityNO")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ThirdName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("GenderID");

                    b.HasIndex("GradeID");

                    b.HasIndex("JobDescriptionID");

                    b.HasIndex("MaritalStatusID");

                    b.HasIndex("ModifyUserID");

                    b.HasIndex("NationalityID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Entity.EmployeeDependent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelationshipID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifyUserID");

                    b.HasIndex("RelationshipID");

                    b.ToTable("EmployeeDependent");
                });

            modelBuilder.Entity("Entity.EmployeeShift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<int?>("RelationshipID")
                        .HasColumnType("int");

                    b.Property<int>("ShiftTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.HasIndex("RelationshipID");

                    b.ToTable("EmployeeShift");
                });

            modelBuilder.Entity("Entity.EmployeeShiftToEmployee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeShiftId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "EmployeeShiftId");

                    b.HasIndex("EmployeeShiftId");

                    b.ToTable("EmployeeShiftToEmployee");
                });

            modelBuilder.Entity("Entity.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Entity.GeneralRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("GeneralRequestTypeID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("GeneralRequestTypeID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("GeneralRequest");
                });

            modelBuilder.Entity("Entity.GeneralRequestType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeNameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("GeneralRequestType");
                });

            modelBuilder.Entity("Entity.Grade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("Entity.JobDescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("JobDescription");
                });

            modelBuilder.Entity("Entity.MaritalStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("Entity.Nationality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllowedSocialSecurityNo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIqamaNO")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassportNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequiredNationalNo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("Nationality");
                });

            modelBuilder.Entity("Entity.Relationship", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("Entity.SalaryInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BankAccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankBranchID")
                        .HasColumnType("int");

                    b.Property<int>("BankID")
                        .HasColumnType("int");

                    b.Property<string>("BankSwift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BasicSalary")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SalaryInfo");
                });

            modelBuilder.Entity("Entity.ShiftType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<string>("FromTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("ShiftCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftTypeNameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("ShiftType");
                });

            modelBuilder.Entity("Entity.ShiftTypeEmployeeShift", b =>
                {
                    b.Property<int>("EmployeeShiftId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftTypeId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeShiftId", "ShiftTypeId");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("ShiftTypeEmployeeShift");
                });

            modelBuilder.Entity("Entity.TimeAttendance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntranceTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LeaveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<int>("TimeAttendanceStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifyUserID");

                    b.HasIndex("TimeAttendanceStatusID");

                    b.ToTable("TimeAttendance");
                });

            modelBuilder.Entity("Entity.TimeAttendanceStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("TimeAttendanceStatus");
                });

            modelBuilder.Entity("Entity.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Entity.AllowanceType", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.Bank", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.BankBranch", b =>
                {
                    b.HasOne("Entity.Bank", "Bank")
                        .WithMany("BankBranch")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bank-bankbranch");

                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("Bank");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.Company", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.Country", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.Employee", b =>
                {
                    b.HasOne("Entity.Country", "Country")
                        .WithMany("Employee")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Employee-Country");

                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.Gender", "Gender")
                        .WithMany("Emplooye")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Employee-Gender");

                    b.HasOne("Entity.Grade", "Grade")
                        .WithMany("Employee")
                        .HasForeignKey("GradeID")
                        .HasConstraintName("fk_Employee-Grade");

                    b.HasOne("Entity.JobDescription", "JobDescription")
                        .WithMany("Employee")
                        .HasForeignKey("JobDescriptionID")
                        .HasConstraintName("fk_Employee-JobDescription");

                    b.HasOne("Entity.MaritalStatus", "MaritalStatus")
                        .WithMany("Employee")
                        .HasForeignKey("MaritalStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Employee-MaritalStatus");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.HasOne("Entity.Nationality", "Nationality")
                        .WithMany("Employee")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Employee-Nationality");

                    b.Navigation("Country");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Gender");

                    b.Navigation("Grade");

                    b.Navigation("JobDescription");

                    b.Navigation("MaritalStatus");

                    b.Navigation("ModifyUser");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Entity.EmployeeDependent", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.Employee", "Employee")
                        .WithMany("EmployeeDependent")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Employee-EmployeeDependent");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.HasOne("Entity.Relationship", "Relationship")
                        .WithMany("EmployeeDependent")
                        .HasForeignKey("RelationshipID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Relationship-EmployeeDependent");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Employee");

                    b.Navigation("ModifyUser");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("Entity.EmployeeShift", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.HasOne("Entity.Relationship", null)
                        .WithMany("EmployeeShift")
                        .HasForeignKey("RelationshipID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.EmployeeShiftToEmployee", b =>
                {
                    b.HasOne("Entity.Employee", "Employee")
                        .WithMany("EmployeeShiftToEmployee")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.EmployeeShift", "EmployeeShift")
                        .WithMany("EmployeeShiftToEmployee")
                        .HasForeignKey("EmployeeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeShift");
                });

            modelBuilder.Entity("Entity.Gender", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.GeneralRequest", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.Employee", "Employee")
                        .WithMany("GeneralRequest")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_GeneralRequest-Employee");

                    b.HasOne("Entity.GeneralRequestType", "GeneralRequestType")
                        .WithMany("GeneralRequest")
                        .HasForeignKey("GeneralRequestTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_GeneralRequest-GeneralRequestType");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Employee");

                    b.Navigation("GeneralRequestType");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.GeneralRequestType", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.Grade", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.JobDescription", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.MaritalStatus", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.Nationality", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.Relationship", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.SalaryInfo", b =>
                {
                    b.HasOne("Entity.BankBranch", "BankBranch")
                        .WithMany("SalaryInfo")
                        .HasForeignKey("BankBranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_SalaryInfo-Bankbranch");

                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.Employee", "Employee")
                        .WithMany("SalaryInfo")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_SalaryInfo-Employee");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("BankBranch");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Employee");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.ShiftType", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.ShiftTypeEmployeeShift", b =>
                {
                    b.HasOne("Entity.EmployeeShift", "EmployeeShift")
                        .WithMany("ShiftTypeEmployeeShift")
                        .HasForeignKey("EmployeeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.ShiftType", "ShiftType")
                        .WithMany("ShiftTypeEmployeeShift")
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeShift");

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("Entity.TimeAttendance", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.Employee", "Employee")
                        .WithMany("TimeAttendance")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Employee-TimeAttendance");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.HasOne("Entity.TimeAttendanceStatus", "TimeAttendanceStatus")
                        .WithMany("TimeAttendance")
                        .HasForeignKey("TimeAttendanceStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_TimeAttendance-TimeAttendanceStatus");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Employee");

                    b.Navigation("ModifyUser");

                    b.Navigation("TimeAttendanceStatus");
                });

            modelBuilder.Entity("Entity.TimeAttendanceStatus", b =>
                {
                    b.HasOne("Entity.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserID");

                    b.HasOne("Entity.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserID");

                    b.HasOne("Entity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("Entity.Bank", b =>
                {
                    b.Navigation("BankBranch");
                });

            modelBuilder.Entity("Entity.BankBranch", b =>
                {
                    b.Navigation("SalaryInfo");
                });

            modelBuilder.Entity("Entity.Country", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entity.Employee", b =>
                {
                    b.Navigation("EmployeeDependent");

                    b.Navigation("EmployeeShiftToEmployee");

                    b.Navigation("GeneralRequest");

                    b.Navigation("SalaryInfo");

                    b.Navigation("TimeAttendance");
                });

            modelBuilder.Entity("Entity.EmployeeShift", b =>
                {
                    b.Navigation("EmployeeShiftToEmployee");

                    b.Navigation("ShiftTypeEmployeeShift");
                });

            modelBuilder.Entity("Entity.Gender", b =>
                {
                    b.Navigation("Emplooye");
                });

            modelBuilder.Entity("Entity.GeneralRequestType", b =>
                {
                    b.Navigation("GeneralRequest");
                });

            modelBuilder.Entity("Entity.Grade", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entity.JobDescription", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entity.MaritalStatus", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entity.Nationality", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entity.Relationship", b =>
                {
                    b.Navigation("EmployeeDependent");

                    b.Navigation("EmployeeShift");
                });

            modelBuilder.Entity("Entity.ShiftType", b =>
                {
                    b.Navigation("ShiftTypeEmployeeShift");
                });

            modelBuilder.Entity("Entity.TimeAttendanceStatus", b =>
                {
                    b.Navigation("TimeAttendance");
                });
#pragma warning restore 612, 618
        }
    }
}
